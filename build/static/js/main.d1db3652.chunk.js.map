{"version":3,"sources":["navbar.js","displayData.js","decisionapp.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Displayquestions","questionList","data","map","inputs","question","optionA","optionB","optionC","optionD","key","id","className","onClick","handleRandomSelector","Decisionapp","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","newQuestion","onSubmit","this","type","placeholder","name","onChange","Component","App","quesstion","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAUeA,G,KAPA,WACX,OACI,6BACK,qD,OCkCEC,EArCU,SAAC,GAAY,IAExBC,EAFuB,EAAVC,KAEOC,KAAI,SAAAC,GAC1B,MAAuB,IAAnBA,EAAOC,UAAoC,IAAlBD,EAAOE,SAAmC,IAAlBF,EAAOG,SAAmC,IAAlBH,EAAOI,SAAkC,IAAjBJ,EAAOK,QAExG,6BAASC,IAAKN,EAAOO,GAAIC,UAAU,oBACnC,6BACI,wCACA,4BAAKR,EAAOC,WAEhB,6BACI,uCACA,4BACI,kCAAQD,EAAOE,SACf,kCAAQF,EAAOG,SACf,kCAAQH,EAAOI,SACf,kCAAQJ,EAAOK,WAGvB,6BACI,4BAAQI,c,GAAcC,sBAAtB,yBAKD,QAGX,OACG,6BACKb,IC0CDc,E,4MApEXC,MAAO,CACHX,SAAS,KACTC,QAAQ,KACRC,QAAQ,KACRC,QAAQ,KACRC,QAAQ,M,EAEZQ,aAAc,SAACC,GACX,EAAKC,SAAL,eACKD,EAAEE,OAAOT,GAAIO,EAAEE,OAAOC,S,EAG/BC,aAAe,SAACJ,GACZA,EAAEK,iBACH,EAAKC,MAAMC,YAAY,EAAKT,Q,uDAQ5B,OAEI,8BAEI,6BAASJ,UAAU,eAC5B,0BAAMc,SAAUC,KAAKL,cAClB,6BAASV,UAAU,YAEf,4CAGA,6BACA,2BAAOgB,KAAK,OAAOC,YAAY,8BAA8BC,KAAK,WAAWnB,GAAG,WAAWoB,SAAUJ,KAAKV,iBAI7G,6BAASL,UAAU,WACf,2CAGA,6BACE,2BAAOgB,KAAK,OAAOC,YAAY,KAAKC,KAAK,SAASnB,GAAG,UAAUoB,SAAUJ,KAAKV,eAC9E,2BAAOW,KAAK,OAAOC,YAAY,KAAKC,KAAK,UAAUnB,GAAG,UAAUoB,SAAUJ,KAAKV,eAC/E,2BAAOW,KAAK,OAAOC,YAAY,KAAKC,KAAK,UAAUnB,GAAG,UAAUoB,SAAUJ,KAAKV,eAClF,2BAAOW,KAAK,OAAOC,YAAY,KAAKC,KAAK,UAAUnB,GAAG,UAAUoB,SAAUJ,KAAKV,iBAIlF,6BAASL,UAAU,OACf,4BAAQgB,KAAK,UAAb,YAGR,oC,GAvDoBI,aC6BXC,E,4MA5BbjB,MAAQ,CACNd,KAAO,CACL,CAACG,SAAS,GAAIC,QAAQ,GAAIC,QAAQ,GAAIC,QAAQ,GAAIC,QAAQ,GAAIE,GAAG,K,EAKrEc,YAAc,SAACS,GAEbA,EAAUvB,GAAIwB,KAAKC,SACnB,IAAIlC,EAAI,sBAAO,EAAKc,MAAMd,MAAlB,CAAwBgC,IAChC,EAAKf,SAAS,CACZjB,KAAKA,K,uDAKP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcuB,YAAaE,KAAKF,cAChC,kBAAC,EAAD,CAAkBvB,KAAMyB,KAAKX,MAAMd,Y,GAtBzB8B,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d1db3652.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Decisionapp.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav>\r\n             <h1>Decision Maker App</h1>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar","import React from 'react';\r\nimport './Decisionapp.css';\r\n\r\nconst Displayquestions = ({data}) => {\r\n    \r\n        const questionList = data.map(inputs =>{\r\n            if (inputs.question != \"\" && inputs.optionA != \"\" && inputs.optionB != \"\" && inputs.optionC != \"\" && inputs.optionD !=\"\") {\r\n            return (\r\n                <section key={inputs.id} className='displayquestions'>\r\n                <div>\r\n                    <h1>Question</h1>\r\n                    <h3>{inputs.question}</h3>\r\n                </div>\r\n                <div>\r\n                    <h1>Options</h1>\r\n                    <ul>\r\n                        <li>A: {inputs.optionA}</li>\r\n                        <li>B: {inputs.optionB}</li>\r\n                        <li>C: {inputs.optionC}</li>\r\n                        <li>D: {inputs.optionD}</li>\r\n                    </ul>\r\n                </div>\r\n                <div>\r\n                    <button onClick={this.handleRandomSelector}>SELECT YOUR ANSWER </button>\r\n                </div>\r\n            </section>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n        })\r\n        return (\r\n           <div>\r\n               {questionList}\r\n           </div>\r\n        )\r\n    \r\n   \r\n}\r\n\r\nexport default Displayquestions;\r\n\r\n","import React, {Component} from 'react';\r\nimport './Decisionapp.css';\r\nimport displayQuestions from './displayData';\r\nimport Displayquestions from './displayData';\r\n\r\n\r\nclass Decisionapp extends Component {\r\n    state ={\r\n        question:null,\r\n        optionA:null,\r\n        optionB:null,\r\n        optionC:null,\r\n        optionD:null\r\n    }    \r\n    handleChange =(e) => {\r\n        this.setState({\r\n            [e.target.id]:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n       this.props.newQuestion(this.state);\r\n    }\r\n    // handleRandomSelector(){\r\n    //     this.setState({\r\n    //         randomSelector:this.props.data[Math.floor(Math.random()*this.props.inputs.length)]\r\n    //     })\r\n    // }\r\n   render() {\r\n       return (\r\n           \r\n           <main>\r\n               \r\n               <section className=\"homeSection\">\r\n      <form onSubmit={this.handleSubmit}>\r\n         <section className=\"question\">\r\n\r\n             <legend>\r\n                 Question\r\n             </legend>\r\n             <div>\r\n             <input type=\"text\" placeholder=\"Q: Enter your question here\" name='question' id='question' onChange={this.handleChange} />\r\n</div>\r\n      \r\n          </section>\r\n          <section className=\"options\">    \r\n              <legend>\r\n                  Options\r\n              </legend>\r\n              <div>\r\n                <input type=\"text\" placeholder=\"A:\" name='option' id='optionA' onChange={this.handleChange}/>\r\n                <input type=\"text\" placeholder=\"B:\" name='optionB' id='optionB' onChange={this.handleChange}/>\r\n                <input type=\"text\" placeholder=\"C:\" name='optionC' id='optionC' onChange={this.handleChange}/>\r\n             <input type=\"text\" placeholder=\"D:\" name='optionD' id='optionD' onChange={this.handleChange}/>\r\n              </div>\r\n              \r\n         </section>\r\n          <section className='btn'>\r\n              <button type='submit'>Submit</button>\r\n          </section>\r\n      </form>\r\n      <div>\r\n       \r\n      </div>\r\n </section>\r\n \r\n           </main>\r\n           \r\n       )\r\n   }\r\n} \r\n\r\n  \r\n//   ReactDOM.render(<M\r\n\r\nexport default Decisionapp;\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './Decisionapp.css';\nimport Navbar from './navbar';\nimport Decisionapp from './decisionapp';\nimport Displayquestions from './displayData';\n\nclass App extends Component {\n  state = {\n    data : [\n      {question:'', optionA:'', optionB:'', optionC:'', optionD:'', id:1}\n    ]\n\n  }\n \n  newQuestion = (quesstion)=> {\n    \n    quesstion.id =Math.random();\n    let data = [...this.state.data, quesstion]\n    this.setState({\n      data:data,\n    })\n  }\n \n  render() {\n    return (\n      <div>\n        <Navbar/>       \n        <Decisionapp  newQuestion={this.newQuestion}/>\n        <Displayquestions data={this.state.data} />\n      </div>\n    \n    )\n  }\n}\n\nexport default App;\n// title={this.state.title}\n    //  handleChange={()=> this.handleChange()}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}